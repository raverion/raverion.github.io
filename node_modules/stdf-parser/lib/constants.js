"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumEndian = exports.EnumPassFail = exports.MIN_INT16 = exports.MAX_UINT32 = exports.RecordCode = exports.EnumRecordType = void 0;
var EnumRecordType;
(function (EnumRecordType) {
    EnumRecordType["unknown"] = "unknown";
    EnumRecordType["far"] = "FAR";
    EnumRecordType["atr"] = "ATR";
    EnumRecordType["mir"] = "MIR";
    EnumRecordType["mrr"] = "MRR";
    EnumRecordType["pcr"] = "PCR";
    EnumRecordType["hbr"] = "HBR";
    EnumRecordType["sbr"] = "SBR";
    EnumRecordType["pmr"] = "PMR";
    EnumRecordType["pgr"] = "PGR";
    EnumRecordType["plr"] = "PLR";
    EnumRecordType["rdr"] = "RDR";
    EnumRecordType["sdr"] = "SDR";
    EnumRecordType["wir"] = "WIR";
    EnumRecordType["wrr"] = "WRR";
    EnumRecordType["wcr"] = "WCR";
    EnumRecordType["pir"] = "PIR";
    EnumRecordType["prr"] = "PRR";
    EnumRecordType["tsr"] = "TSR";
    EnumRecordType["ptr"] = "PTR";
    EnumRecordType["mpr"] = "MPR";
    EnumRecordType["ftr"] = "FTR";
    EnumRecordType["bps"] = "BPS";
    EnumRecordType["eps"] = "EPS";
    EnumRecordType["gdr"] = "GDR";
    EnumRecordType["dtr"] = "DTR";
})(EnumRecordType || (exports.EnumRecordType = EnumRecordType = {}));
// eslint-disable-next-line @typescript-eslint/naming-convention
exports.RecordCode = {
    0: {
        10: EnumRecordType.far,
        20: EnumRecordType.atr,
    },
    1: {
        10: EnumRecordType.mir,
        20: EnumRecordType.mrr,
        30: EnumRecordType.pcr,
        40: EnumRecordType.hbr,
        50: EnumRecordType.sbr,
        60: EnumRecordType.pmr,
        62: EnumRecordType.pgr,
        63: EnumRecordType.plr,
        70: EnumRecordType.rdr,
        80: EnumRecordType.sdr,
    },
    2: {
        10: EnumRecordType.wir,
        20: EnumRecordType.wrr,
        30: EnumRecordType.wcr,
    },
    5: {
        10: EnumRecordType.pir,
        20: EnumRecordType.prr,
    },
    10: {
        30: EnumRecordType.tsr,
    },
    15: {
        10: EnumRecordType.ptr,
        15: EnumRecordType.mpr,
        20: EnumRecordType.ftr,
    },
    20: {
        10: EnumRecordType.bps,
        20: EnumRecordType.eps,
    },
    50: {
        10: EnumRecordType.gdr,
        30: EnumRecordType.dtr,
    },
    180: 'Reserved for use by Image software',
    181: 'Reserved for use by IG900 software',
};
exports.MAX_UINT32 = 2 ** 32 - 1;
exports.MIN_INT16 = -(2 ** 15);
var EnumPassFail;
(function (EnumPassFail) {
    EnumPassFail["pass"] = "P";
    EnumPassFail["fail"] = "F";
    EnumPassFail["unknown"] = "";
})(EnumPassFail || (exports.EnumPassFail = EnumPassFail = {}));
var EnumEndian;
(function (EnumEndian) {
    EnumEndian[EnumEndian["little"] = 0] = "little";
    EnumEndian[EnumEndian["big"] = 1] = "big";
})(EnumEndian || (exports.EnumEndian = EnumEndian = {}));
//# sourceMappingURL=constants.js.map