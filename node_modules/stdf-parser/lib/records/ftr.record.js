"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FtrRecord = exports.EnumFtrOptFlag = exports.EnumFtrTestFlag = void 0;
const stdf_record_1 = require("../stdf-record");
var EnumFtrTestFlag;
(function (EnumFtrTestFlag) {
    EnumFtrTestFlag[EnumFtrTestFlag["ALARM"] = 1] = "ALARM";
    EnumFtrTestFlag[EnumFtrTestFlag["RESERVED"] = 2] = "RESERVED";
    EnumFtrTestFlag[EnumFtrTestFlag["unreliable"] = 4] = "unreliable";
    EnumFtrTestFlag[EnumFtrTestFlag["timeout"] = 8] = "timeout";
    EnumFtrTestFlag[EnumFtrTestFlag["notExecute"] = 16] = "notExecute";
    EnumFtrTestFlag[EnumFtrTestFlag["abort"] = 32] = "abort";
    EnumFtrTestFlag[EnumFtrTestFlag["noPassFail"] = 64] = "noPassFail";
    EnumFtrTestFlag[EnumFtrTestFlag["failed"] = 128] = "failed";
})(EnumFtrTestFlag || (exports.EnumFtrTestFlag = EnumFtrTestFlag = {}));
var EnumFtrOptFlag;
(function (EnumFtrOptFlag) {
    EnumFtrOptFlag[EnumFtrOptFlag["invalidCycleCount"] = 1] = "invalidCycleCount";
    EnumFtrOptFlag[EnumFtrOptFlag["invalidRelVAddr"] = 2] = "invalidRelVAddr";
    EnumFtrOptFlag[EnumFtrOptFlag["invalidRepeatCount"] = 4] = "invalidRepeatCount";
    EnumFtrOptFlag[EnumFtrOptFlag["invalidNumFail"] = 8] = "invalidNumFail";
    EnumFtrOptFlag[EnumFtrOptFlag["invalidXYFailAddr"] = 16] = "invalidXYFailAddr";
    EnumFtrOptFlag[EnumFtrOptFlag["invalidVectOff"] = 32] = "invalidVectOff";
})(EnumFtrOptFlag || (exports.EnumFtrOptFlag = EnumFtrOptFlag = {}));
class FtrRecord extends stdf_record_1.StdfRecord {
    testNum;
    headNum;
    siteNum;
    testFlag;
    optFlag;
    cycleCount;
    relVAddr;
    repeatCount;
    numFail;
    xFailAddr;
    yFailAddr;
    vectOff;
    rtnCount;
    pgmCount;
    rtnIndexes;
    rtnStats;
    pgmIndexes;
    pgmStats;
    failPin;
    vectName;
    timeSet;
    opCode;
    testTxt;
    alarmId;
    progTxt;
    resultTxt;
    patgNum;
    spinMap;
    constructor(type, sub, br) {
        super(type, sub, br);
        this.testNum = br.readUInt32();
        this.headNum = br.readUInt8();
        this.siteNum = br.readUInt8();
        this.testFlag = br.readUInt8();
        this.optFlag = br.readUInt8();
        this.cycleCount = br.readUInt32();
        this.relVAddr = br.readUInt32();
        this.repeatCount = br.readUInt32();
        this.numFail = br.readUInt32();
        this.xFailAddr = br.readInt32();
        this.yFailAddr = br.readInt32();
        this.vectOff = br.readInt16();
        this.rtnCount = br.readUInt16();
        this.pgmCount = br.readUInt16();
        this.rtnIndexes = new Array(this.rtnCount ?? 0);
        this.rtnStats = new Array(this.rtnCount ?? 0);
        if (this.rtnCount && this.rtnCount > 0) {
            for (let i = 0; i < this.rtnCount; i++) {
                this.rtnIndexes[i] = br.readUInt16();
            }
            for (let i = 0; i < this.rtnCount; i += 2) {
                const t = br.readNibble();
                if (t) {
                    this.rtnStats[i] = t[0];
                    this.rtnStats[i + 1] = t[1];
                }
            }
        }
        this.pgmIndexes = new Array(this.pgmCount ?? 0);
        this.pgmStats = new Array(this.pgmCount ?? 0);
        if (this.pgmCount && this.pgmCount > 0) {
            for (let i = 0; i < this.pgmCount; i++) {
                this.pgmIndexes[i] = br.readUInt16();
            }
            for (let i = 0; i < this.pgmCount; i += 2) {
                const t = br.readNibble();
                if (t) {
                    this.pgmStats[i] = t[0];
                    this.pgmStats[i + 1] = t[1];
                }
            }
        }
        this.failPin = br.readBitBuffer();
        this.vectName = br.readVarChar();
        this.timeSet = br.readVarChar();
        this.opCode = br.readVarChar();
        this.testTxt = br.readVarChar();
        this.alarmId = br.readVarChar();
        this.progTxt = br.readVarChar();
        this.resultTxt = br.readVarChar();
        if (br.buffer.remaining()) {
            this.patgNum = br.readUInt8();
        }
        if (br.buffer.remaining()) {
            this.spinMap = br.readBitBuffer();
        }
    }
}
exports.FtrRecord = FtrRecord;
//# sourceMappingURL=ftr.record.js.map