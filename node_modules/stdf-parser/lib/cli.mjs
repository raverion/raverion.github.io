#!/usr/bin/env node
import { createReadStream, createWriteStream } from 'fs';
import { stat } from 'fs/promises';
import { basename } from 'path';
import ProgressBar from 'progress';
import { pipeline } from 'stream/promises';
import { StdfParser } from './parser.js';
const files = process.argv.slice(2);
if (files.length === 0) {
    throw new Error('no input file');
}
for (const file of files) {
    try {
        await stream(file);
        console.log(`success: ${file}`);
    }
    catch (e) {
        console.log(`error: ${file}`);
        console.error(e);
    }
}
export async function stream(filename) {
    const st = await stat(filename);
    const bar = new ProgressBar(`${filename} :bar :percent :current/:total :rate/s :etas`, { total: st.size });
    const stream = createReadStream(filename, { highWaterMark: 1024 * 1024 * 10 });
    const output = createWriteStream(`${basename(filename)}.ndjson`, { highWaterMark: 1024 * 1024 * 10 });
    let count = 0;
    const parser = StdfParser.stream();
    await pipeline(stream, parser, async function* (source) {
        let lastOffset = 0;
        for await (const record of source) {
            const offset = parser.offset - lastOffset;
            if (offset > 0) {
                bar.tick(parser.offset - lastOffset);
                lastOffset = parser.offset;
            }
            if (record) {
                count++;
            }
            yield `${JSON.stringify(record)}\n`;
        }
    }, output);
    bar.terminate();
    console.log(`count: ${count}`);
}
//# sourceMappingURL=cli.mjs.map