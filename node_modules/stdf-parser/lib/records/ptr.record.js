"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumPTRTestFlag = exports.PtrRecord = exports.EnumPtrParamFlag = exports.EnumPtrOptFlag = void 0;
const stdf_record_1 = require("../stdf-record");
const util_1 = require("../util");
var EnumPtrOptFlag;
(function (EnumPtrOptFlag) {
    EnumPtrOptFlag[EnumPtrOptFlag["RES_SCAL_INVALID"] = 1] = "RES_SCAL_INVALID";
    EnumPtrOptFlag[EnumPtrOptFlag["RESERVED"] = 2] = "RESERVED";
    EnumPtrOptFlag[EnumPtrOptFlag["NO_LO_SPEC"] = 4] = "NO_LO_SPEC";
    EnumPtrOptFlag[EnumPtrOptFlag["NO_HI_SPEC"] = 8] = "NO_HI_SPEC";
    EnumPtrOptFlag[EnumPtrOptFlag["LO_LIMIT_INVALID"] = 16] = "LO_LIMIT_INVALID";
    EnumPtrOptFlag[EnumPtrOptFlag["HI_LIMIT_INVALID"] = 32] = "HI_LIMIT_INVALID";
    EnumPtrOptFlag[EnumPtrOptFlag["NO_LO_LIMIT"] = 64] = "NO_LO_LIMIT";
    EnumPtrOptFlag[EnumPtrOptFlag["NO_HI_LIMIT"] = 128] = "NO_HI_LIMIT";
})(EnumPtrOptFlag || (exports.EnumPtrOptFlag = EnumPtrOptFlag = {}));
var EnumPtrParamFlag;
(function (EnumPtrParamFlag) {
    EnumPtrParamFlag[EnumPtrParamFlag["SCALE_ERROR"] = 1] = "SCALE_ERROR";
    EnumPtrParamFlag[EnumPtrParamFlag["DRIFT_ERROR"] = 2] = "DRIFT_ERROR";
    EnumPtrParamFlag[EnumPtrParamFlag["OSCILLATION_DETECTED"] = 4] = "OSCILLATION_DETECTED";
    EnumPtrParamFlag[EnumPtrParamFlag["MEASURE_HIGH"] = 8] = "MEASURE_HIGH";
    EnumPtrParamFlag[EnumPtrParamFlag["MEASURE_LOW"] = 16] = "MEASURE_LOW";
    EnumPtrParamFlag[EnumPtrParamFlag["TEST_PASS_ALT_LIMIT"] = 32] = "TEST_PASS_ALT_LIMIT";
    /** 当测试值等于下限时，认为PASS */
    EnumPtrParamFlag[EnumPtrParamFlag["PASS_LOW_EQUAL"] = 64] = "PASS_LOW_EQUAL";
    /** 当测试值等于上限时，认为PASS */
    EnumPtrParamFlag[EnumPtrParamFlag["PASS_HIGH_EQUAL"] = 128] = "PASS_HIGH_EQUAL";
})(EnumPtrParamFlag || (exports.EnumPtrParamFlag = EnumPtrParamFlag = {}));
class PtrRecord extends stdf_record_1.StdfRecord {
    testNum;
    headNum;
    siteNum;
    testFlag;
    paramFlag;
    result;
    testText;
    alarmId;
    optFlag;
    resScal;
    llmScal;
    hlmScal;
    loLimit;
    hiLimit;
    units;
    cResFormat;
    cLLMFormat;
    cHLMFormat;
    loSpec;
    hiSpec;
    constructor(type, sub, br) {
        super(type, sub, br);
        this.testNum = br.readUInt32();
        this.headNum = br.readUInt8();
        this.siteNum = br.readUInt8();
        this.testFlag = br.readUInt8();
        this.paramFlag = br.readUInt8();
        this.result = br.readFloat();
        this.testText = br.readVarChar();
        this.alarmId = br.readVarChar();
        if (br.remaining() === 0)
            return;
        this.optFlag = br.readUInt8();
        this.resScal = br.readInt8();
        this.llmScal = br.readInt8();
        this.hlmScal = br.readInt8();
        this.loLimit = br.readFloat() ?? undefined;
        this.hiLimit = br.readFloat() ?? undefined;
        this.units = br.readVarChar() ?? undefined;
        this.cResFormat = br.readVarChar() ?? undefined;
        if (br.remaining() === 0)
            return;
        this.cLLMFormat = br.readVarChar() ?? undefined;
        if (br.remaining() === 0)
            return;
        this.cHLMFormat = br.readVarChar() ?? undefined;
        if (br.remaining() === 0)
            return;
        if (this.optFlag && (0, util_1.isEnumBitSet)(this.optFlag, EnumPtrOptFlag.NO_LO_SPEC)) {
            this.loSpec = undefined;
        }
        else {
            this.loSpec = br.readFloat() ?? undefined;
        }
        if (this.optFlag && (0, util_1.isEnumBitSet)(this.optFlag, EnumPtrOptFlag.NO_HI_SPEC)) {
            this.hiSpec = undefined;
        }
        else {
            this.hiSpec = br.readFloat() ?? undefined;
        }
    }
    get realLoLimit() {
        if (this.optFlag && (0, util_1.isEnumBitSet)(this.optFlag, EnumPtrOptFlag.NO_LO_LIMIT))
            return undefined;
        return this.loLimit;
    }
    get realHiLimit() {
        if (this.optFlag && (0, util_1.isEnumBitSet)(this.optFlag, EnumPtrOptFlag.NO_HI_LIMIT))
            return undefined;
        return this.hiLimit;
    }
}
exports.PtrRecord = PtrRecord;
var EnumPTRTestFlag;
(function (EnumPTRTestFlag) {
    EnumPTRTestFlag[EnumPTRTestFlag["ALARM"] = 1] = "ALARM";
    EnumPTRTestFlag[EnumPTRTestFlag["RESULT_INVALID"] = 2] = "RESULT_INVALID";
    EnumPTRTestFlag[EnumPTRTestFlag["RESULT_UNRELIABLE"] = 4] = "RESULT_UNRELIABLE";
    EnumPTRTestFlag[EnumPTRTestFlag["TIMEOUT"] = 8] = "TIMEOUT";
    EnumPTRTestFlag[EnumPTRTestFlag["NOT_EXECUTED"] = 16] = "NOT_EXECUTED";
    EnumPTRTestFlag[EnumPTRTestFlag["ABORTED"] = 32] = "ABORTED";
    EnumPTRTestFlag[EnumPTRTestFlag["PASS_INVALID"] = 64] = "PASS_INVALID";
    EnumPTRTestFlag[EnumPTRTestFlag["FAILED"] = 128] = "FAILED";
})(EnumPTRTestFlag || (exports.EnumPTRTestFlag = EnumPTRTestFlag = {}));
//# sourceMappingURL=ptr.record.js.map