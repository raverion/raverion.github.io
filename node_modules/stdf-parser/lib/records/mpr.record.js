"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MprRecord = exports.EnumMPRParamFlag = exports.EnumMPRTestFlag = exports.EnumMprOptFlag = void 0;
const stdf_record_1 = require("../stdf-record");
var EnumMprOptFlag;
(function (EnumMprOptFlag) {
    EnumMprOptFlag[EnumMprOptFlag["NO_RES_SCAL"] = 1] = "NO_RES_SCAL";
    EnumMprOptFlag[EnumMprOptFlag["NO_START_IN"] = 2] = "NO_START_IN";
    EnumMprOptFlag[EnumMprOptFlag["NO_LOW_SPEC"] = 4] = "NO_LOW_SPEC";
    EnumMprOptFlag[EnumMprOptFlag["NO_HIGH_SPEC"] = 8] = "NO_HIGH_SPEC";
    EnumMprOptFlag[EnumMprOptFlag["INVALID_LO_LIMIT"] = 16] = "INVALID_LO_LIMIT";
    EnumMprOptFlag[EnumMprOptFlag["INVALID_HI_LIMIT"] = 32] = "INVALID_HI_LIMIT";
    EnumMprOptFlag[EnumMprOptFlag["NO_LO_LIMIT"] = 64] = "NO_LO_LIMIT";
    EnumMprOptFlag[EnumMprOptFlag["NO_HI_LIMIT"] = 128] = "NO_HI_LIMIT";
})(EnumMprOptFlag || (exports.EnumMprOptFlag = EnumMprOptFlag = {}));
var EnumMPRTestFlag;
(function (EnumMPRTestFlag) {
    EnumMPRTestFlag[EnumMPRTestFlag["ALARM"] = 1] = "ALARM";
    EnumMPRTestFlag[EnumMPRTestFlag["RESERVED"] = 2] = "RESERVED";
    EnumMPRTestFlag[EnumMPRTestFlag["RESULT_UNRELIABLE"] = 4] = "RESULT_UNRELIABLE";
    EnumMPRTestFlag[EnumMPRTestFlag["TIMEOUT"] = 8] = "TIMEOUT";
    EnumMPRTestFlag[EnumMPRTestFlag["NOT_EXECUTED"] = 16] = "NOT_EXECUTED";
    EnumMPRTestFlag[EnumMPRTestFlag["ABORTED"] = 32] = "ABORTED";
    EnumMPRTestFlag[EnumMPRTestFlag["PASS_INVALID"] = 64] = "PASS_INVALID";
    EnumMPRTestFlag[EnumMPRTestFlag["FAILED"] = 128] = "FAILED";
})(EnumMPRTestFlag || (exports.EnumMPRTestFlag = EnumMPRTestFlag = {}));
var EnumMPRParamFlag;
(function (EnumMPRParamFlag) {
    EnumMPRParamFlag[EnumMPRParamFlag["SCALE_ERROR"] = 1] = "SCALE_ERROR";
    EnumMPRParamFlag[EnumMPRParamFlag["DRIFT_ERROR"] = 2] = "DRIFT_ERROR";
    EnumMPRParamFlag[EnumMPRParamFlag["OSCILLATION_DETECTED"] = 4] = "OSCILLATION_DETECTED";
    EnumMPRParamFlag[EnumMPRParamFlag["MEASURE_LOW"] = 16] = "MEASURE_LOW";
    EnumMPRParamFlag[EnumMPRParamFlag["TEST_PASS_ALT_LIMIT"] = 32] = "TEST_PASS_ALT_LIMIT";
    /** 当测试值等于下限时，认为PASS */
    EnumMPRParamFlag[EnumMPRParamFlag["PASS_LOW_EQUAL"] = 64] = "PASS_LOW_EQUAL";
    /** 当测试值等于上限时，认为PASS */
    EnumMPRParamFlag[EnumMPRParamFlag["PASS_HIGH_EQUAL"] = 128] = "PASS_HIGH_EQUAL";
})(EnumMPRParamFlag || (exports.EnumMPRParamFlag = EnumMPRParamFlag = {}));
class MprRecord extends stdf_record_1.StdfRecord {
    testNum;
    headNum;
    siteNum;
    testFlag;
    paramFlag;
    rtnCount;
    resultCount;
    rtnStats;
    rtnResults;
    testTxt;
    alarmId;
    optFlag;
    resScal;
    llmScal;
    hlmScal;
    loLimit;
    hiLimit;
    startIn;
    incrIn;
    rtnIndex;
    units;
    unitsIn;
    cResFormat;
    cLLMFormat;
    cHLMFormat;
    loSpec;
    hiSpec;
    constructor(type, sub, br) {
        super(type, sub, br);
        this.testNum = br.readUInt32();
        this.headNum = br.readUInt8();
        this.siteNum = br.readUInt8();
        this.testFlag = br.readUInt8();
        this.paramFlag = br.readUInt8();
        this.rtnCount = br.readUInt16();
        this.resultCount = br.readUInt16();
        this.rtnStats = new Array(this.rtnCount ?? 0);
        if (this.rtnCount && this.rtnCount > 0) {
            for (let i = 0; i < this.rtnCount; i += 2) {
                const t = br.readNibble();
                if (t) {
                    this.rtnStats[i] = t[0];
                    this.rtnStats[i + 1] = t[1];
                }
            }
        }
        this.rtnResults = new Array(this.resultCount ?? 0);
        if (this.resultCount && this.resultCount > 0) {
            for (let i = 0; i < this.resultCount; i++) {
                this.rtnResults[i] = br.readFloat();
            }
        }
        this.testTxt = br.readVarChar();
        this.alarmId = br.readVarChar();
        this.optFlag = br.readUInt8();
        this.resScal = br.readInt8();
        this.llmScal = br.readInt8();
        this.hlmScal = br.readInt8();
        this.loLimit = br.readFloat();
        this.hiLimit = br.readFloat();
        this.startIn = br.readFloat();
        this.incrIn = br.readFloat();
        if (br.remaining() > 0) {
            this.rtnIndex = new Array(this.rtnCount ?? 0);
            if (this.rtnCount && this.rtnCount > 0) {
                for (let i = 0; i < this.rtnCount; i++) {
                    this.rtnIndex[i] = br.readUInt16();
                }
            }
        }
        this.units = br.readVarChar();
        this.unitsIn = br.readVarChar();
        this.cResFormat = br.readVarChar();
        this.cLLMFormat = br.readVarChar();
        this.cHLMFormat = br.readVarChar();
        if (this.optFlag && (this.optFlag & EnumMprOptFlag.NO_LOW_SPEC) !== 0) { // bit 2 = 1
            this.loSpec = br.readFloat();
        }
        else {
            this.loSpec = 0;
        }
        if (this.optFlag && (this.optFlag & EnumMprOptFlag.NO_HIGH_SPEC) !== 0) { // bit 3 = 1
            this.hiSpec = br.readFloat();
        }
        else {
            this.hiSpec = 0;
        }
    }
    get realLoLimit() {
        if (this.optFlag && (this.optFlag & EnumMprOptFlag.NO_LO_LIMIT) !== 0)
            return undefined;
        return this.loLimit;
    }
    get realHiLimit() {
        if (this.optFlag && (this.optFlag & EnumMprOptFlag.NO_HI_LIMIT) !== 0)
            return undefined;
        return this.hiLimit;
    }
}
exports.MprRecord = MprRecord;
//# sourceMappingURL=mpr.record.js.map