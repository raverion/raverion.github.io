import { BufferReader } from '../buffer-reader';
import { StdfRecord } from '../stdf-record';
export declare enum EnumPtrOptFlag {
    RES_SCAL_INVALID = 1,
    RESERVED = 2,
    NO_LO_SPEC = 4,
    NO_HI_SPEC = 8,
    LO_LIMIT_INVALID = 16,
    HI_LIMIT_INVALID = 32,
    NO_LO_LIMIT = 64,
    NO_HI_LIMIT = 128
}
export declare enum EnumPtrParamFlag {
    SCALE_ERROR = 1,
    DRIFT_ERROR = 2,
    OSCILLATION_DETECTED = 4,
    MEASURE_HIGH = 8,
    MEASURE_LOW = 16,
    TEST_PASS_ALT_LIMIT = 32,
    /** 当测试值等于下限时，认为PASS */
    PASS_LOW_EQUAL = 64,
    /** 当测试值等于上限时，认为PASS */
    PASS_HIGH_EQUAL = 128
}
export declare class PtrRecord extends StdfRecord {
    testNum?: number;
    headNum?: number;
    siteNum?: number;
    testFlag?: EnumPTRTestFlag;
    paramFlag?: number;
    result?: number;
    testText?: string;
    alarmId?: string;
    optFlag?: EnumPtrOptFlag | null;
    resScal?: number | null;
    llmScal?: number | null;
    hlmScal?: number | null;
    loLimit?: number;
    hiLimit?: number;
    units?: string;
    cResFormat?: string;
    cLLMFormat?: string;
    cHLMFormat?: string;
    loSpec?: number;
    hiSpec?: number;
    constructor(type: number, sub: number, br: BufferReader);
    get realLoLimit(): number | undefined;
    get realHiLimit(): number | undefined;
}
export declare enum EnumPTRTestFlag {
    ALARM = 1,
    RESULT_INVALID = 2,
    RESULT_UNRELIABLE = 4,
    TIMEOUT = 8,
    NOT_EXECUTED = 16,
    ABORTED = 32,
    PASS_INVALID = 64,
    FAILED = 128
}
